--- geoclue-0.12.99/providers/gpsd/geoclue-gpsd.c.orig	2012-07-31 18:47:05.000000000 +0200
+++ geoclue-0.12.99/providers/gpsd/geoclue-gpsd.c	2013-08-30 16:49:28.898513583 +0200
@@ -33,6 +33,7 @@
 
 #include <math.h>
 #include <gps.h>
+#include <stdlib.h>
 #include <string.h>
 
 #include <geoclue/geoclue-error.h>
@@ -40,7 +41,6 @@
 #include <geoclue/gc-iface-position.h>
 #include <geoclue/gc-iface-velocity.h>
 
-typedef struct gps_data_t gps_data;
 typedef struct gps_fix_t gps_fix;
 
 /* only listing used tags */
@@ -59,7 +59,7 @@
 	char *host;
 	char *port;
 	
-	gps_data *gpsdata;
+	struct gps_data_t *gpsdata;
 	
 	gps_fix *last_fix;
 	
@@ -397,12 +397,13 @@
 static gboolean
 geoclue_gpsd_start_gpsd (GeoclueGpsd *self)
 {
-	self->gpsdata = gps_open (self->host, self->port);
-	if (self->gpsdata) {
-		gps_stream(self->gpsdata, WATCH_ENABLE | WATCH_NMEA | POLL_NONBLOCK, NULL);
-		gps_set_raw_hook (self->gpsdata, gpsd_raw_hook);
+	struct gps_data_t *gd = calloc (1, sizeof(struct gps_data_t));
+	if (gd && (gps_open (self->host, self->port, gd) >= 0)) {
+		self->gpsdata = gd;
+		gps_stream(self->gpsdata, WATCH_ENABLE | WATCH_NMEA | WATCH_RAW, NULL);
 		return TRUE;
 	} else {
+		free (gd);
 		g_warning ("gps_open() failed, is gpsd running (host=%s,port=%s)?", self->host, self->port);
 		return FALSE;
 	}
@@ -413,10 +414,13 @@
 {
 	GeoclueGpsd *self = (GeoclueGpsd*)data;
 	if (self->gpsdata) {
-		if (gps_poll(self->gpsdata) < 0) {
+		if (gps_read(self->gpsdata) < 0) {
 			geoclue_gpsd_set_status (self, GEOCLUE_STATUS_ERROR);
 			geoclue_gpsd_stop_gpsd(self);
 			return FALSE;
+		} else if(self->gpsdata->set) {
+			gpsd_raw_hook(self->gpsdata, NULL, 0);
+			self->gpsdata->set = 0;
 		}
 	}
 	return TRUE;
--- geoclue-0.12.99/providers/gpsd/geoclue-gpsd.c.orig	2019-10-04 21:09:50.492270776 +0200
+++ geoclue-0.12.99/providers/gpsd/geoclue-gpsd.c	2019-10-05 15:21:29.244100259 +0200
@@ -43,15 +43,6 @@
 
 typedef struct gps_fix_t gps_fix;
 
-/* only listing used tags */
-typedef enum {
-	NMEA_NONE,
-	NMEA_GSA,
-	NMEA_GGA,
-	NMEA_GSV,
-	NMEA_RMC
-} NmeaTag;
-
 
 typedef struct {
 	GcProvider parent;
@@ -229,7 +220,7 @@
 }
 
 static void
-geoclue_gpsd_update_position (GeoclueGpsd *gpsd, NmeaTag nmea_tag)
+geoclue_gpsd_update_position (GeoclueGpsd *gpsd)
 {
 	gps_fix *fix = &gpsd->gpsdata->fix;
 	gps_fix *last_fix = gpsd->last_fix;
@@ -280,7 +271,7 @@
 }
 
 static void
-geoclue_gpsd_update_velocity (GeoclueGpsd *gpsd, NmeaTag nmea_tag)
+geoclue_gpsd_update_velocity (GeoclueGpsd *gpsd)
 {
 	gps_fix *fix = &gpsd->gpsdata->fix;
 	gps_fix *last_fix = gpsd->last_fix;
@@ -293,8 +284,7 @@
 	 * couldn't think of an smart way to handle this, I don't think there is one
 	 */
 	
-	if (((gpsd->gpsdata->set & TRACK_SET) || (gpsd->gpsdata->set & SPEED_SET)) &&
-	    nmea_tag == NMEA_RMC) {
+	if (((gpsd->gpsdata->set & TRACK_SET) || (gpsd->gpsdata->set & SPEED_SET))) {
 		
 		gpsd->gpsdata->set &= ~(TRACK_SET | SPEED_SET);
 		
@@ -308,10 +298,7 @@
 			last_fix->track = fix->track;
 			last_fix->speed = fix->speed;
 		}
-	} else if ((gpsd->gpsdata->set & CLIMB_SET) &&
-	           (nmea_tag == NMEA_GGA || 
-	            nmea_tag == NMEA_GSA || 
-	            nmea_tag == NMEA_GSV)) {
+	} else if ((gpsd->gpsdata->set & CLIMB_SET)) {
 		
 		gpsd->gpsdata->set &= ~(CLIMB_SET);
 		
@@ -342,7 +329,7 @@
 }
 
 static void
-geoclue_gpsd_update_status (GeoclueGpsd *gpsd, NmeaTag nmea_tag)
+geoclue_gpsd_update_status (GeoclueGpsd *gpsd)
 {
 	GeoclueStatus status;
 	
@@ -367,22 +354,9 @@
 static void 
 gpsd_raw_hook (struct gps_data_t *gpsdata, char *message, size_t len)
 {
-	char *tag_str = gpsd->gpsdata->tag;
-	NmeaTag nmea_tag = NMEA_NONE;
-	
-	if (tag_str[0] == 'G' && tag_str[1] == 'S' && tag_str[2] == 'A') {
-		nmea_tag = NMEA_GSA;
-	} else if (tag_str[0] == 'G' && tag_str[1] == 'G' && tag_str[2] == 'A') {
-		nmea_tag = NMEA_GGA;
-	} else if (tag_str[0] == 'G' && tag_str[1] == 'S' && tag_str[2] == 'V') {
-		nmea_tag = NMEA_GSV;
-	} else if (tag_str[0] == 'R' && tag_str[1] == 'M' && tag_str[2] == 'C') {
-		nmea_tag = NMEA_RMC;
-	}
-	
-	geoclue_gpsd_update_status (gpsd, nmea_tag);
-	geoclue_gpsd_update_position (gpsd, nmea_tag);
-	geoclue_gpsd_update_velocity (gpsd, nmea_tag);
+	geoclue_gpsd_update_status (gpsd);
+	geoclue_gpsd_update_position (gpsd);
+	geoclue_gpsd_update_velocity (gpsd);
 }
 
 static void
@@ -414,7 +388,7 @@
 {
 	GeoclueGpsd *self = (GeoclueGpsd*)data;
 	if (self->gpsdata) {
-		if (gps_read(self->gpsdata) < 0) {
+		if (gps_read(self->gpsdata, NULL, 0) < 0) {
 			geoclue_gpsd_set_status (self, GEOCLUE_STATUS_ERROR);
 			geoclue_gpsd_stop_gpsd(self);
 			return FALSE;
--- geoclue-0.12.99/providers/gpsd/geoclue-gpsd.c.orig	2024-06-23 12:38:55.516440776 +0200
+++ geoclue-0.12.99/providers/gpsd/geoclue-gpsd.c	2024-06-23 12:39:00.639746354 +0200
@@ -264,7 +264,7 @@ geoclue_gpsd_update_position (GeoclueGps
 	
 	gc_iface_position_emit_position_changed 
 		(GC_IFACE_POSITION (gpsd), gpsd->last_pos_fields,
-		 (int)(last_fix->time+0.5), 
+		 last_fix->time.tv_sec + (last_fix->time.tv_nsec >= 500000000L), 
 		 last_fix->latitude, last_fix->longitude, last_fix->altitude, 
 		 gpsd->last_accuracy);
 	
@@ -323,7 +323,7 @@ geoclue_gpsd_update_velocity (GeoclueGps
 		
 		gc_iface_velocity_emit_velocity_changed 
 			(GC_IFACE_VELOCITY (gpsd), gpsd->last_velo_fields,
-			 (int)(last_fix->time+0.5),
+			 last_fix->time.tv_sec + (last_fix->time.tv_nsec >= 500000000L),
 			 last_fix->speed, last_fix->track, last_fix->climb);
 	}
 }
@@ -334,12 +334,12 @@ geoclue_gpsd_update_status (GeoclueGpsd
 	GeoclueStatus status;
 	
 	/* gpsdata->online is supposedly always up-to-date */
-	if (gpsd->gpsdata->online <= 0) {
+	if (gpsd->gpsdata->online.tv_sec <= 0) {
 		status = GEOCLUE_STATUS_UNAVAILABLE;
 	} else if (gpsd->gpsdata->set & STATUS_SET) {
 		gpsd->gpsdata->set &= ~(STATUS_SET);
 		
-		if (gpsd->gpsdata->status > 0) {
+		if (gpsd->gpsdata->fix.status > 0) {
 			status = GEOCLUE_STATUS_AVAILABLE;
 		} else {
 			status = GEOCLUE_STATUS_ACQUIRING;
@@ -435,7 +435,7 @@ get_position (GcIfacePosition       *gc,
 {
 	GeoclueGpsd *gpsd = GEOCLUE_GPSD (gc);
 	
-	*timestamp = (int)(gpsd->last_fix->time+0.5);
+	*timestamp = gpsd->last_fix->time.tv_sec + (gpsd->last_fix->time.tv_nsec >= 500000000L);
 	*latitude = gpsd->last_fix->latitude;
 	*longitude = gpsd->last_fix->longitude;
 	*altitude = gpsd->last_fix->altitude;
@@ -462,7 +462,7 @@ get_velocity (GcIfaceVelocity       *gc,
 {
 	GeoclueGpsd *gpsd = GEOCLUE_GPSD (gc);
 	
-	*timestamp = (int)(gpsd->last_fix->time+0.5);
+	*timestamp = gpsd->last_fix->time.tv_sec + (gpsd->last_fix->time.tv_nsec >= 500000000L);
 	*speed = gpsd->last_fix->speed;
 	*direction = gpsd->last_fix->track;
 	*climb = gpsd->last_fix->climb;
